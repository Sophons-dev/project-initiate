model User {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  clerkId             String       @unique @map("clerkId")
  email               String       @unique
  userType            UserType?
  onboardingCompleted Boolean      @default(false)
  profile             UserProfile?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  careerInsight              CareerInsight?
  careerInsightLogs          CareerInsightLog[]
  opportunityRecommendations OpportunityRecommendation[]
  userAnswers                UserAnswer[]
  userOpportunities          UserOpportunity[]
}

model UserAnswer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  questionId String    @db.ObjectId
  version    Int       @default(1)
  value      String
  answeredAt DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  question   Question  @relation(fields: [questionId], references: [id])

  @@index([userId])
  @@index([questionId])
}

model UserOpportunity {
  id            String                @id @map("_id") @db.ObjectId
  userId        String                @db.ObjectId
  opportunityId String                @db.ObjectId
  status        UserOpportunityStatus @default(saved)
  createdAt     DateTime?
  updatedAt     DateTime?
  user          User                  @relation(fields: [userId], references: [id])
  opportunity   Opportunity           @relation(fields: [opportunityId], references: [id])

  @@index([userId])
  @@index([opportunityId])
}

type UserProfile {
  name        String
  image       String?
  gender      Gender?
  dateOfBirth DateTime?
  phoneNumber String?
  education   Education?
  location    String?
  interests   String[]
}

type Address {
  street   String?
  city     String?
  province String?
  country  String?
}

type Occupation {
  company  String?
  position String?
}

type Education {
  school String?
  degree String?
  level  EducationLevel
}

type UserModelData {
  version          Int      @default(1)
  learningStyle    String?
  availability     String?
  preferredWorkEnv String?
  remoteFriendly   Boolean?
}
